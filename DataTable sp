public class DataTableMethodManager<TDelegate> where TDelegate : Delegate
{
    private Dictionary<string, TDelegate>[] dictionaries;

    public DataTableMethodManager(params Dictionary<string, TDelegate>[] inputDictionaries)
    {
        dictionaries = inputDictionaries;
    }

    public Dictionary<string, DataTable> GetDataForId(string id, params object[] args)
    {
        var result = new Dictionary<string, DataTable>();
        string[] worksheetNames = { "Worksheet1", "Worksheet2", "Worksheet3" };

        for (int i = 0; i < dictionaries.Length; i++)
        {
            if (dictionaries[i].TryGetValue(id, out TDelegate method))
            {
                try
                {
                    string composedKey = $"{worksheetNames[i]}_{id}";
                    result[composedKey] = (DataTable)method.DynamicInvoke(args);
                }
                catch (Exception ex)
                {
                    // Handle or log the exception
                }
            }
        }

        return result;
    }
}


//////////////////////
public DataSet CallSpForDs(string storedProcedureName, Dictionary<string, object> sqlParameters)
{
    var parameters = _parameterManager.GetParameters(storedProcedureName, sqlParameters);

    using (SqlConnection conn = new SqlConnection(_connectionString))
    {
        using (SqlCommand cmd = new SqlCommand(storedProcedureName, conn))
        {
            cmd.CommandType = CommandType.StoredProcedure;

            foreach (var parameter in parameters)
            {
                cmd.Parameters.Add(parameter);
            }

            using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
            {
                DataSet dataSet = new DataSet();
                adapter.Fill(dataSet);
                return dataSet;
            }
        }
    }
}


/////////////////////////

public static List<T> ConvertToList<T>(DataTable dataTable) where T : new()
{
    List<T> list = new List<T>();

    foreach (DataRow row in dataTable.Rows)
    {
        T obj = new T();
        foreach (DataColumn column in dataTable.Columns)
        {
            PropertyInfo prop = typeof(T).GetProperty(column.ColumnName);
            if (prop != null)
            {
                if (row[column] == DBNull.Value)
                {
                    // If the value is DBNull, set the property to null (for nullable types)
                    if (Nullable.GetUnderlyingType(prop.PropertyType) != null)
                    {
                        prop.SetValue(obj, null, null);
                    }
                }
                else
                {
                    // If the value is not DBNull, convert it to the proper type
                    Type propType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
                    object safeValue = Convert.ChangeType(row[column], propType);
                    prop.SetValue(obj, safeValue, null);
                }
            }
        }
        list.Add(obj);
    }

    return list;
}

public class ViewStateManager
{
    // Assuming ViewState is a property of type StateBag or similar
    private StateBag ViewState;

    public ViewStateManager(StateBag viewState)
    {
        ViewState = viewState;
    }

    // Generic method to get data of any type from ViewState
    public T Get<T>(string key) where T : class
    {
        return ViewState[key] as T;
    }

    // Method to set data of any type into ViewState
    public void Set<T>(string key, T value) where T : class
    {
        ViewState[key] = value;
    }

    // Method to check if the ViewState contains a specific key
    public bool ContainsKey(string key)
    {
        return ViewState.ContainsKey(key);
    }

    // Method to remove an item from ViewState
    public void Remove(string key)
    {
        if (ViewState.ContainsKey(key))
        {
            ViewState.Remove(key);
        }
    }

    // Example specific method (e.g., for PageConfig)
    public PageConfig GetPageConfig()
    {
        return Get<PageConfig>("PageConfig");
    }

    // Add more specific methods as needed...
}

/////////////////////////////////////////////////////


private void ProcessDropdownElementsField(IEnumerable<ElementsField> elementsFields, 
                                          DataTable cardSubDetailsTable, 
                                          Func<DataRow, bool> idElementPredicate,
                                          MapperOptions mapperDropdownOptions)
{
    foreach (ElementsField elementField in elementsFields)
    {
        if (elementField.RodzajPola == "dropdown")
        {
            elementField.ElementSubElementsField = GetMappedRowsElementSubElementsField(
                cardSubDetailsTable,
                idElementPredicate,
                mapperDropdownOptions);

            if (elementField.CorrespondingValue.ToString() != "Nie dotyczy")
            {
                CreateHtmlElements(
                    elementField.RodzajPola,
                    elementField.FiledyMozliwe,
                    elementField.NazwaTechnicznaPola,
                    elementField.CorrespondingValue,
                    elementField.NazwaPola,
                    elementField.IdPlaceholder,
                    elementField.ElementSubElementsField);
            }
        }
    }
}

// Usage for the first collection of ElementsField objects
ProcessDropdownElementsField(elementsField, 
                             cardSubDetailsTable, 
                             row => Convert.ToInt32(row["IdElementu"]) == elementField.IdElementu, 
                             mapperDropdownOptions);

// Usage for the second collection of ElementsField objects for reinspection
ProcessDropdownElementsField(elementsFieldReinspection, 
                             cardSubDetailsTable, 
                             row => Convert.ToInt32(row["IdElementu"]) == reinspection.IdElementu, 
                             mapperDropdownOptions);





////////////////////////////////////////////////////////////////////////

public SqlDbType ConvertToSqlDbType(Type type)
{
    if (type == typeof(int)) return SqlDbType.Int;
    else if (type == typeof(string)) return SqlDbType.VarChar;
    else if (type == typeof(DateTime)) return SqlDbType.DateTime;
    // Add more type conversions as needed

    throw new ArgumentException($"Unsupported type: {type.FullName}");
}



public void CallStoredProcedure(string connectionString, string spName, Dictionary<string, DataTable> dtParams, Dictionary<string, string> tableTypes, Dictionary<string, object> otherParameters)
{
    using (SqlConnection sqlConn = new SqlConnection(connectionString))
    {
        using (SqlCommand cmd = new SqlCommand(spName, sqlConn))
        {
            cmd.CommandType = CommandType.StoredProcedure;

            // Add DataTable parameters
            foreach (var dtParam in dtParams)
            {
                string tableTypeName;
                if (tableTypes.TryGetValue(dtParam.Key, out tableTypeName))
                {
                    SqlParameter param = new SqlParameter(dtParam.Key, SqlDbType.Structured)
                    {
                        TypeName = tableTypeName,
                        Value = dtParam.Value
                    };
                    cmd.Parameters.Add(param);
                }
                else
                {
                    throw new ArgumentException($"No table type provided for DataTable parameter {dtParam.Key}");
                }
            }

            // Add other parameters
            foreach (var param in otherParameters)
            {
                cmd.Parameters.AddWithValue(param.Key, param.Value);
            }

            sqlConn.Open();
            cmd.ExecuteNonQuery();
        }
    }
}

protected void YourButton_Click(object sender, EventArgs e)
{
    DataTable dt1 = GetParametersFromHiddenFields();
    // Generate more DataTables as needed
    // DataTable dt2 = ...

    Dictionary<string, DataTable> dtParams = new Dictionary<string, DataTable>
    {
        { "@YourTableParam1", dt1 },
        // Add more DataTable parameters as needed
        // { "@YourTableParam2", dt2 },
    };

    Dictionary<string, string> tableTypes = new Dictionary<string, string>
    {
        { "@YourTableParam1", "dbo.YourUserDefinedTableType1" },
        // Add more table types as needed
        // { "@YourTableParam2", "dbo.YourUserDefinedTableType2" },
    };

    Dictionary<string, object> otherParameters = new Dictionary<string, object>
    {
        { "@Param1", "SomeString" },
        { "@Param2", 123 }
        // Add more parameters as needed
    };

    string connectionString = ConfigurationManager.ConnectionStrings["YourConnectionString"].ConnectionString;
    string spName = "YourStoredProcedure";

    CallStoredProcedure(connectionString, spName, dtParams, tableTypes, otherParameters);
}










private DataTable GetParametersFromHiddenFields()
{
    // Initialize the DataTable
    DataTable dt = new DataTable();

    // Define the hidden field IDs and their corresponding types
    Dictionary<string, Type> hiddenFieldDict = new Dictionary<string, Type>
    {
        { "hiddenField1", typeof(int) },
        { "hiddenField2", typeof(string) },
        // add more hidden field IDs and their types
    };

    AddColumnsToDataTable(dt, hiddenFieldDict);

    // Add all specified hidden fields to one DataRow
    DataRow row = dt.NewRow();
    foreach (var hiddenFieldEntry in hiddenFieldDict)
    {
        Control hiddenField = FindHiddenField(this, hiddenFieldEntry.Key);
        SetRowValueFromHiddenField(row, hiddenField, hiddenFieldEntry.Value);
    }
    dt.Rows.Add(row);

    return dt;
}

private void AddColumnsToDataTable(DataTable dt, Dictionary<string, Type> hiddenFieldDict)
{
    // Add a column for each hidden field ID
    foreach (KeyValuePair<string, Type> hiddenFieldEntry in hiddenFieldDict)
    {
        // Replace "hf_" with an empty string in column name
        string columnName = hiddenFieldEntry.Key.Replace("hf_", "");
        dt.Columns.Add(columnName, hiddenFieldEntry.Value);
    }
}


private void SetRowValueFromHiddenField(DataRow row, Control hiddenField, Type type)
{
    string paramName = hiddenField != null ? hiddenField.ID : null;
    object value = GetHiddenFieldValue(hiddenField, type);
    row[paramName] = value;
}

private object GetHiddenFieldValue(Control hiddenField, Type type)
{
    // If the hidden field is null or does not exist, return null
    if (hiddenField == null)
    {
        return null;
    }
    
    // Convert the value to the specified type
    string value = (hiddenField as HiddenField).Value;
    if (type == typeof(int))
    {
        return int.Parse(value);
    }
    else if (type == typeof(decimal))
    {
        return decimal.Parse(value);
    }
    else if (type == typeof(bool))
    {
        return bool.Parse(value);
    }
    // add more types as necessary
    else
    {
        return value;
    }
}
