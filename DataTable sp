public void CallStoredProcedure(string connectionString, string spName, Dictionary<string, DataTable> dtParams, Dictionary<string, string> tableTypes, Dictionary<string, object> otherParameters)
{
    using (SqlConnection sqlConn = new SqlConnection(connectionString))
    {
        using (SqlCommand cmd = new SqlCommand(spName, sqlConn))
        {
            cmd.CommandType = CommandType.StoredProcedure;

            // Add DataTable parameters
            foreach (var dtParam in dtParams)
            {
                string tableTypeName;
                if (tableTypes.TryGetValue(dtParam.Key, out tableTypeName))
                {
                    SqlParameter param = new SqlParameter(dtParam.Key, SqlDbType.Structured)
                    {
                        TypeName = tableTypeName,
                        Value = dtParam.Value
                    };
                    cmd.Parameters.Add(param);
                }
                else
                {
                    throw new ArgumentException($"No table type provided for DataTable parameter {dtParam.Key}");
                }
            }

            // Add other parameters
            foreach (var param in otherParameters)
            {
                cmd.Parameters.AddWithValue(param.Key, param.Value);
            }

            sqlConn.Open();
            cmd.ExecuteNonQuery();
        }
    }
}

protected void YourButton_Click(object sender, EventArgs e)
{
    DataTable dt1 = GetParametersFromHiddenFields();
    // Generate more DataTables as needed
    // DataTable dt2 = ...

    Dictionary<string, DataTable> dtParams = new Dictionary<string, DataTable>
    {
        { "@YourTableParam1", dt1 },
        // Add more DataTable parameters as needed
        // { "@YourTableParam2", dt2 },
    };

    Dictionary<string, string> tableTypes = new Dictionary<string, string>
    {
        { "@YourTableParam1", "dbo.YourUserDefinedTableType1" },
        // Add more table types as needed
        // { "@YourTableParam2", "dbo.YourUserDefinedTableType2" },
    };

    Dictionary<string, object> otherParameters = new Dictionary<string, object>
    {
        { "@Param1", "SomeString" },
        { "@Param2", 123 }
        // Add more parameters as needed
    };

    string connectionString = ConfigurationManager.ConnectionStrings["YourConnectionString"].ConnectionString;
    string spName = "YourStoredProcedure";

    CallStoredProcedure(connectionString, spName, dtParams, tableTypes, otherParameters);
}










private DataTable GetParametersFromHiddenFields()
{
    // Initialize the DataTable
    DataTable dt = new DataTable();

    // Define the hidden field IDs and their corresponding types
    Dictionary<string, Type> hiddenFieldDict = new Dictionary<string, Type>
    {
        { "hiddenField1", typeof(int) },
        { "hiddenField2", typeof(string) },
        // add more hidden field IDs and their types
    };

    AddColumnsToDataTable(dt, hiddenFieldDict);

    // Add all specified hidden fields to one DataRow
    DataRow row = dt.NewRow();
    foreach (var hiddenFieldEntry in hiddenFieldDict)
    {
        Control hiddenField = FindHiddenField(this, hiddenFieldEntry.Key);
        SetRowValueFromHiddenField(row, hiddenField, hiddenFieldEntry.Value);
    }
    dt.Rows.Add(row);

    return dt;
}

private void AddColumnsToDataTable(DataTable dt, Dictionary<string, Type> hiddenFieldDict)
{
    // Add a column for each hidden field ID
    foreach (KeyValuePair<string, Type> hiddenFieldEntry in hiddenFieldDict)
    {
        // Replace "hf_" with an empty string in column name
        string columnName = hiddenFieldEntry.Key.Replace("hf_", "");
        dt.Columns.Add(columnName, hiddenFieldEntry.Value);
    }
}


private void SetRowValueFromHiddenField(DataRow row, Control hiddenField, Type type)
{
    string paramName = hiddenField != null ? hiddenField.ID : null;
    object value = GetHiddenFieldValue(hiddenField, type);
    row[paramName] = value;
}

private object GetHiddenFieldValue(Control hiddenField, Type type)
{
    // If the hidden field is null or does not exist, return null
    if (hiddenField == null)
    {
        return null;
    }
    
    // Convert the value to the specified type
    string value = (hiddenField as HiddenField).Value;
    if (type == typeof(int))
    {
        return int.Parse(value);
    }
    else if (type == typeof(decimal))
    {
        return decimal.Parse(value);
    }
    else if (type == typeof(bool))
    {
        return bool.Parse(value);
    }
    // add more types as necessary
    else
    {
        return value;
    }
}
