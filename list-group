
class GridViewManager {
  constructor(gridViewId, spinnerId, hiddenFieldId) {
    this.gridViewId = gridViewId;
    this.spinnerId = spinnerId;
    this.hiddenFieldId = hiddenFieldId;
    this.bindEvents();
  }

  bindEvents() {
    // Bind to all DropDownList changes that affect the GridView
    document.querySelectorAll('[id*=DropDownList]').forEach(ddl => {
      ddl.addEventListener('change', (event) => {
        this.updateHiddenField('in progress');
        this.toggleSpinner(true);
        __doPostBack(event.target.id, ''); // Cause postback to refresh data
      });
    });
  }

  updateHiddenField(value) {
    const hiddenField = document.getElementById(this.hiddenFieldId);
    if (hiddenField) {
      hiddenField.value = value;
    } else {
      console.warn(`Hidden field with id '${this.hiddenFieldId}' not found.`);
    }
  }

  toggleSpinner(show) {
    const spinner = document.getElementById(this.spinnerId);
    const gridView = document.getElementById(this.gridViewId);

    if (spinner) {
      spinner.style.display = show ? 'block' : 'none';
    }
    if (gridView) {
      gridView.style.visibility = show ? 'hidden' : 'visible';
    }
  }

  // This method should be called after the server-side operation completes
  operationComplete() {
    this.updateHiddenField('done');
    this.toggleSpinner(false);
  }
}

// Instantiate the class with the IDs of your GridView, Spinner, and HiddenField
const gridViewManager = new GridViewManager('GridViewOrders', 'SpinnerOrders', 'HiddenFieldOrdersStatus');


protected void DropDownList_SelectedIndexChanged(object sender, EventArgs e)
{
    // Your data loading logic for the GridView...

    // After loading data, call the operationComplete method to hide the spinner
    string script = "gridViewManager.operationComplete();";
    ClientScript.RegisterStartupScript(this.GetType(), "HideSpinner", script, true);
}

<asp:DropDownList ID="DropDownListCustomer" runat="server" AutoPostBack="True" 
    OnSelectedIndexChanged="DropDownListCustomer_SelectedIndexChanged">
    <!-- Populate with ListItem elements here -->
</asp:DropDownList>

<asp:HiddenField ID="HiddenFieldOrdersStatus" runat="server" />

<!-- Presumably, you also have a SpinnerOrders element in your markup that you want to show/hide -->
<div id="SpinnerOrders" style="display:none;">
    <!-- Your spinner HTML here -->
</div>

<asp:GridView ID="GridViewOrders" runat="server">
    <!-- Columns and other setup here -->
</asp:GridView>


//////////////////////////
class FieldSynchronizer {
  constructor() {
    this.bindEvents();
  }

  bindEvents() {
    // Bind to DropDownList changes
    document.querySelectorAll('[id$=DropDownList]').forEach(ddl => {
      ddl.addEventListener('change', this.updateHiddenField.bind(this));
    });

    // Bind to TextBox inputs
    document.querySelectorAll('[id$=TextBox]').forEach(textBox => {
      textBox.addEventListener('input', this.updateHiddenField.bind(this));
    });

    // Other specific controls can be added similarly
  }

  updateHiddenField(event) {
    const control = event.target;
    const hiddenFieldId = control.id.replace('DropDownList', 'HiddenField').replace('TextBox', 'HiddenField');
    const hiddenField = document.getElementById(hiddenFieldId);

    if (hiddenField) {
      hiddenField.value = control.value;
    } else {
      console.warn(`Hidden field with id '${hiddenFieldId}' not found.`);
    }
  }

  // Future methods can be added here to extend functionality
}

// Instantiate the class
const synchronizer = new FieldSynchronizer();


//////////////////////////////////////
class VisibilityManager {
  constructor(radioButtonsSelector, elementCategory, selectedControlSearch, prefixArray) {
    this.radioButtons = document.querySelectorAll(radioButtonsSelector);
    this._elementCategory = elementCategory;
    this._selectedControlSearch = selectedControlSearch;
    this.prefixArray = prefixArray;
    this.initEvents();
    this.setDefaultVisibility();
  }

  getValue(element) {
    return element.value;
  }

  setValue(element, value) {
    element.value = value;
  }

  setDefaultVisibility() {
    const category = this.getValue(this._elementCategory);
    if (category) {
      this.toggleVisibility(category, this.getValue(this._selectedControlSearch));
    }
  }

  initEvents() {
    this.radioButtons.forEach(radioButton => {
      radioButton.addEventListener('change', (event) => this.onRadioButtonChange(event));
    });
  }

  onRadioButtonChange(event) {
    const radioButton = event.target;
    this.setValue(
      this._elementCategory,
      radioButton.id !== 'Hide' ? radioButton.id : this.getValue(this._elementCategory)
    );
    this.setValue(this._selectedControlSearch, radioButton.id);

    this.toggleVisibility(
      this.getValue(this._elementCategory),
      this.getValue(this._selectedControlSearch)
    );
  }

  // ... rest of the methods remain unchanged ...
}

// Usage remains unchanged ...



////////////////////////////
class VisibilityManager {
  constructor(radioButtonsSelector, elementCategory, selectedControlSearch, prefixArray) {
    this.radioButtons = document.querySelectorAll(radioButtonsSelector);
    this.elementCategory = elementCategory;
    this.selectedControlSearch = selectedControlSearch;
    this.prefixArray = prefixArray;
    this.initEvents();
    this.setDefaultVisibility();
  }

  setDefaultVisibility() {
    const selector = this.elementCategory.value;
    const buttonSelector = this.selectedControlSearch.value;
    if (selector) {
      this.toggleVisibility(selector, buttonSelector);
    }
  }

  initEvents() {
    this.radioButtons.forEach(radioButton => {
      radioButton.addEventListener('change', this.onRadioButtonChange.bind(this));
    });
  }

  onRadioButtonChange(event) {
    const radioButton = event.target;
    this.elementCategory.value = radioButton.id !== 'Hide' ? radioButton.id : this.elementCategory.value;
    this.selectedControlSearch.value = radioButton.id;

    this.toggleVisibility(this.elementCategory.value, this.selectedControlSearch.value);
  }

  hideAll() {
    this.prefixArray.forEach(prefix => {
      const elements = document.querySelectorAll(`[id^='${prefix}']`);
      elements.forEach(el => el.style.display = 'none');
    });
  }

  showElementsByCategory(category, btnCategory) {
    this.prefixArray.forEach(prefix => {
      if (!(btnCategory === 'Hide' && prefix === 'divPanel')) {
        const selector = `[id^='${prefix}${category}']`;
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => el.style.display = '');
      }
    });
  }

  toggleVisibility(selectorToShow, selectorBtnToShow) {
    this.hideAll();
    this.showElementsByCategory(selectorToShow, selectorBtnToShow);
  }
}

const visibleElementsCategory = document.getElementById('ContentPlaceHolder1_hf_visibleElementsCategory');
const selectedControlSearch = document.getElementById('ContentPlaceHolder1_hf_selectedControlSearch');

const prefixes = ['divPanel', 'divResult'];

const visibilityManager = new VisibilityManager('.radioButton', visibleElementsCategory, selectedControlSearch, prefixes);


////////////////
function selectElementsByCategory(category) {
  // Define the prefixes
  const prefixes = ['div_', 'card_', 'element_'];

  // Initialize an array to hold all matched elements
  const elements = [];

  // Loop through each prefix and select elements with the matching ID
  prefixes.forEach(prefix => {
    // Use the attribute selector to find elements with an ID that starts with the prefix and category name
    const selector = `[id^=${prefix}${category}]`;
    const foundElements = document.querySelectorAll(selector);

    // Add found elements to the elements array
    foundElements.forEach(el => elements.push(el));
  });

  return elements;
}

// Example usage:
const waterElements = selectElementsByCategory('water');
console.log(waterElements);

const sunElements = selectElementsByCategory('sun');
console.log(sunElements);


class VisibilityManager {
  constructor(radioButtonsSelector, elementsSelectors) {
    this.radioButtons = document.querySelectorAll(radioButtonsSelector);
    this.elementsSelectors = elementsSelectors;
    this.initEvents();
  }

  initEvents() {
    this.radioButtons.forEach(radioButton => {
      radioButton.addEventListener('change', this.onRadioButtonChange.bind(this));
    });
  }

  onRadioButtonChange(event) {
    const radioButton = event.target;
    const selector = this.elementsSelectors[radioButton.value];
    this.toggleVisibility(selector);
  }

  hideAll() {
    Object.values(this.elementsSelectors).forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach(el => el.style.display = 'none');
    });
  }

  showElements(selector) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(el => el.style.display = '');
  }

  toggleVisibility(selectorToShow) {
    this.hideAll();
    this.showElements(selectorToShow);
  }
}

// Usage
document.addEventListener('DOMContentLoaded', () => {
  const visibilityManager = new VisibilityManager('.my-radio', {
    'radio1': '#panel1, #gridview1',
    'radio2': '#panel2, #gridview2',
    'radio3': '#panel3, #gridview3'
  });
});















///////////////////////////////////////////////////////////


document.addEventListener("DOMContentLoaded", function() {
    // Select all checkboxes with id starting with "pytanieBlad"
    let checkboxes = document.querySelectorAll('input[type="checkbox"][id^="pytanieBlad"]');

    checkboxes.forEach(checkbox => {
        checkbox.addEventListener("change", function() {
            let hiddenFieldId = "hf_" + checkbox.id;
            let hiddenField = document.getElementById(hiddenFieldId);
            if (hiddenField) {
                hiddenField.value = checkbox.checked ? "true" : "false";
            }
        });
    });
});



<ul>
    <li class="Twitter">
        <a href="https://twitter.com/flowuhhWEB" target="blank_">
            <h3>Twitter</h3>
            <p>Follow us on Twitter to see updates on work, events and careers.</p>
            <i class="fa fa-twitter"></i>
        </a>
    </li>
    <li class="Dribbble">
        <a href="https://dribbble.com/flowuhh" target="blank_">
            <h3>Dribbble</h3>
            <p>Our Dribbble showcases off our prototype designs which you can try to build.</p>
            <i class="fa fa-dribbble"></i>
        </a>
    </li>
    <li class="GitHub">
        <a href="https://github.com/flowuhh" target="blank_">
            <h3>GitHub</h3>
            <p>All of our projects can be forked and worked on through GitHub.</p>
            <i class="fa fa-github"></i>
        </a>
    </li>
</ul>

@import url('https://fonts.googleapis.com/css?family=Roboto:400,900');

body {
    font-family: "Roboto", sans-serif;
    background-color: #f2f2f2;
    line-height: 1.2;
}

ul {
    width: 60vw;
    padding: 0;
    margin: 0;
    list-style: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@media (max-width: 840px) {
    ul {
        width: 80vw;
    }
}

ul li {
    border-bottom: 2px solid #e6e6e6;
    position: relative;
    overflow: hidden;
    transition: 0.2s ease-in-out;
}

ul li a {
    display: block;
    padding: 30px;
    text-decoration: none;
    color: #222;
    transition: 0.2s ease-in-out;
}

ul li a h3 {
    margin: 0 0 15px;
    font-size: 30px;
    font-weight: 900;
}

ul li a p {
    margin: 0;
    font-size: 20px;
    max-width: calc(100% - 110px);
}

ul li a i {
    position: absolute;
    top: 50%;
    right: 50px;
    transform: translatey(-50%);
    font-size: 80px !important;
    opacity: 0.25;
}

ul li.Twitter:hover {
    background-color: #55acee;
}

ul li.Dribbble:hover {
    background-color: #ea4c89;
}

ul li.GitHub:hover {
    background-color: #333;
}

ul li:hover {
    box-shadow: 0 10px 15px 0 #e6e6e6;
}

ul li:hover > a {
    color: #fff;
}

ul li:first-child {
    border-top: 2px solid #e6e6e6;
}
