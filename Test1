// v4 

var panelsToRender = config.PanelTags
    .SelectMany(tagName => 
    {
        var tag = panelTags.FirstOrDefault(t => t.TagName == tagName);
        return tag != null ? tag.Panels : new List<Panel>();
    })
    .Distinct();


// v3

public class PanelManager
{
    private List<PanelTag> panelTags;
    private List<PanelConfiguration> configurations;

    public PanelManager()
    {
        InitializePanelTags();
        InitializeConfigurations();
    }

    private void InitializePanelTags()
    {
        panelTags = new List<PanelTag>
        {
            new PanelTag
            {
                TagName = "CommonAdmin",
                Panels = new List<Panel> { /* Initialize panels here */ }
            },
            //... other tags
        };
    }

    private void InitializeConfigurations()
    {
        configurations = new List<PanelConfiguration>
        {
            new PanelConfiguration
            {
                AccessLevel = "Admin",
                Mode = "Mode1",
                Category = "Category1",
                PanelTags = new List<string> { "CommonAdmin" }
            },
            // ... other configurations
        };
    }

    public void RenderPanels(string accessLevel, string mode, string category)
    {
        var config = configurations.FirstOrDefault(c => 
            c.AccessLevel == accessLevel && 
            c.Mode == mode && 
            c.Category == category);

        if (config != null)
        {
            var panelsToRender = config.PanelTags
                .SelectMany(tagName => panelTags.FirstOrDefault(t => t.TagName == tagName)?.Panels ?? new List<Panel>())
                .Distinct();

            foreach (var panel in panelsToRender)
            {
                panel.Visible = true;
            }
        }
    }
}

public partial class YourWebForm : System.Web.UI.Page
{
    private PanelManager panelManager;

    protected void Page_Load(object sender, EventArgs e)
    {
        panelManager = new PanelManager();
        
        // These methods are just placeholders. Replace them with your actual logic to get access level, mode, and category.
        string currentAccessLevel = GetCurrentAccessLevel();
        string currentMode = GetCurrentMode();
        string currentCategory = GetCurrentCategory();
        
        panelManager.RenderPanels(currentAccessLevel, currentMode, currentCategory);
    }

    private string GetCurrentAccessLevel()
    {
        // Implement your logic to get the current access level.
        return "SomeAccessLevel";
    }

    private string GetCurrentMode()
    {
        // Implement your logic to get the current mode.
        return "SomeMode";
    }

    private string GetCurrentCategory()
    {
        // Implement your logic to get the current category.
        return "SomeCategory";
    }
}


// v2
public static List<TOutput> GetMappedRows<TOutput>(
    DataTable table,
    Func<DataRow, bool> filterFunc,
    Func<DataRow, TOutput> mapper,
    int? questionId = null) // Optional parameter to filter by QuestionId
    where TOutput : class
{
    List<TOutput> outputList = new List<TOutput>();
    
    foreach (DataRow row in table.AsEnumerable())
    {
        // If a questionId is provided, use it to filter the DataRow
        if (questionId.HasValue && row.Field<int>("IdPytania") != questionId.Value)
            continue;

        if (filterFunc == null || filterFunc(row))
        {
            outputList.Add(mapper(row));
        }
    }
    
    return outputList;
}

if (question.checkbox)
{
    // Fetch and map the mistakes related to the specific question
    DataTable mistakesTable = DataTableStore.GetMistakes(); // Assume this fetches all mistakes
    List<Mistake> mistakesForQuestion = GetMappedRows<Mistake>(
        mistakesTable,
        null,
        row => new Mistake(row),
        question.IdPytania
    );

    // Update the 'Mistakes' list of the 'Question' object
    question.Mistakes = mistakesForQuestion;

    var checkboxesDiv = BuildCheckboxesDiv(question);
    questionDiv.Controls.Add(checkboxesDiv);
}

private HtmlGenericControl BuildCheckboxesDiv(Question question)
{
    var checkboxesDiv = new HtmlGenericControl("div");
    checkboxesDiv.Attributes.Add("class", "form-check");

    foreach (var mistake in question.Mistakes)
    {
        // Create each checkbox and label based on the mistake details
        var checkbox = new HtmlInputCheckBox();
        checkbox.Attributes.Add("class", "form-check-input");
        checkbox.Value = mistake.IdBledu.ToString();

        var label = new HtmlGenericControl("label");
        label.Attributes.Add("class", "form-check-label");
        label.Attributes.Add("for", checkbox.ClientID);
        label.InnerText = mistake.NazwaBledu;

        checkboxesDiv.Controls.Add(checkbox);
        checkboxesDiv.Controls.Add(label);
    }

    return checkboxesDiv;
}


// v1
private Dictionary<GridView, (string queryString, string commandName)> gridViewMap;

protected void Page_Init(object sender, EventArgs e)
{
    // Initialize the dictionary
    gridViewMap = new Dictionary<GridView, (string, string)>
    {
        { gridView1, (queryString1, commandName1) },
        { gridView2, (queryString2, commandName2) }
        // Add as many gridViews as you have
    };
}

protected void Page_Load(object sender, EventArgs e)
{
    BindDataToAllGridViews();
}

private void BindDataToAllGridViews()
{
    foreach (var pair in gridViewMap)
    {
        BindDataToGridView(pair.Key, pair.Value.queryString, pair.Value.commandName);
    }
}



void gridView_PageIndexChanging(object sender, GridViewPageEventArgs e)
{
    GridView gridView = sender as GridView;
    string queryString;

    // Use the GridView's ID to get the query string from the dictionary
    if (gridView != null && GridViewQueries.TryGetValue(gridView.ID, out queryString))
    {
        // Set the new page index
        gridView.PageIndex = e.NewPageIndex;

        // Rebind the data
        BindDataToGridView(gridView, queryString, "Edit");
    }
    else
    {
        // Handle the case where the GridView's ID is not in the dictionary
        // For example, you might log an error or throw an exception
    }
}


private Dictionary<string, string> GridViewQueries
{
    get
    {
        return ViewState["GridViewQueries"] as Dictionary<string, string> ?? new Dictionary<string, string>();
    }
    set
    {
        ViewState["GridViewQueries"] = value;
    }
}


private Dictionary<GridView, string> gridViewQueries = new Dictionary<GridView, string>();

protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        string queryString1 = "Your SQL Query String for Table 1";
        string queryString2 = "Your SQL Query String for Table 2";
        
        BindDataToGridView(GridView1, queryString1, "Edit");
        BindDataToGridView(GridView2, queryString2, "Edit");

        // Add the GridView and query string to the dictionary
        gridViewQueries[GridView1] = queryString1;
        gridViewQueries[GridView2] = queryString2;
    }
}

void gridView_PageIndexChanging(object sender, GridViewPageEventArgs e)
{
    GridView gridView = sender as GridView;

    // Get the query string from the dictionary
    string queryString = gridViewQueries[gridView];

    // Set the new page index
    gridView.PageIndex = e.NewPageIndex;

    // Rebind the data
    BindDataToGridView(gridView, queryString, "Edit");
}





<asp:GridView ID="GridView1" runat="server" AutoGenerateColumns="False" />
<asp:GridView ID="GridView2" runat="server" AutoGenerateColumns="False" />


protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        string queryString1 = "Your SQL Query String for Table 1";
        string queryString2 = "Your SQL Query String for Table 2";
        
        BindDataToGridView(GridView1, queryString1, "Edit");
        BindDataToGridView(GridView2, queryString2, "Edit");
    }
}

public DataTable GetData(string queryString)
{
    string connectionString = "Your SQL Server Connection String";

    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        SqlCommand command = new SqlCommand(queryString, connection);
        command.Connection.Open();

        SqlDataAdapter dataAdapter = new SqlDataAdapter(command);
        DataTable dt = new DataTable();
        dataAdapter.Fill(dt);

        return dt;
    }
}

public void AddButtonField(GridView gridView, string commandName)
{
    TemplateField templateField = new TemplateField();
    templateField.HeaderText = "Action";

    // Define the ItemTemplate and add a LinkButton to it.
    templateField.ItemTemplate = new CompiledBindableTemplateBuilder(delegate (Control container)
    {
        LinkButton linkButton = new LinkButton();
        linkButton.ID = "LinkButton1";
        linkButton.CommandName = commandName;
        linkButton.CommandArgument = '<%# Eval("ID") %>';
        linkButton.CssClass = "btn btn-primary";

        LiteralControl icon = new LiteralControl();
        icon.Text = "<i class=\"bi bi-check-circle\"></i>";
        linkButton.Controls.Add(icon);

        linkButton.Controls.Add(new LiteralControl("Click Me"));

        container.Controls.Add(linkButton);
    }, null);

    gridView.Columns.Add(templateField);
}

public void BindDataToGridView(GridView gridView, string queryString, string commandName)
{
    // Fetch data from the SQL Server.
    DataTable dt = GetData(queryString);

    // Set AllowPaging to true and set PageSize.
    gridView.AllowPaging = true;
    gridView.PageSize = 10; // Set the number of records per page.

    // Add the event handler for PageIndexChanging.
    gridView.PageIndexChanging += new GridViewPageEventHandler(gridView_PageIndexChanging);

    // Set AutoGenerateColumns to false
    gridView.AutoGenerateColumns = false;

    // Add columns to GridView
    foreach (DataColumn column in dt.Columns)
    {
        BoundField boundField = new BoundField();
        boundField.DataField = column.ColumnName;
        boundField.HeaderText = column.ColumnName;
        gridView.Columns.Add(boundField);
    }

    // Add a ButtonField to the GridView.
    AddButtonField(gridView, commandName);

    // Set the DataSource and bind the data to the GridView.
    gridView.DataSource = dt;
    gridView.DataBind();
}

void gridView_PageIndexChanging(object sender, GridViewPageEventArgs e)
{
    GridView gridView = sender as GridView;
    Tuple<string, string> pair;

    if (gridView != null && gridViewMap.TryGetValue(gridView, out pair))
    {
        // Set the new page index
        gridView.PageIndex = e.NewPageIndex;

        // Get the card (grandparent)
        HtmlGenericControl card = (HtmlGenericControl)gridView.Parent.Parent;

        // Rebind the data
        BindDataToGridView(gridView, card, pair.Item1, pair.Item2);
    }
}



void gridView_PageIndexChanging(object sender, GridViewPageEventArgs e)
{
    GridView gridView = sender as GridView;
    string queryString = "Your SQL Query String";

    // Set the new page index
    gridView.PageIndex = e.NewPageIndex;

    // Rebind the data
    BindDataToGridView(gridView, queryString, "Edit");
}

